/* Rexx  with thanks to Mike Cowlishaw of IBM */
/**********************************************************************/
/*                                                                    */
/* Dataset Display Facility (DDF)                                     */
/* -------------------------------                                    */
/*                                                                    */
/* Provide shortcuts into as many ISPF facilities as possible         */
/*                                                                    */
/* This program is copyright of Roy Gardiner gardiner@btinternet.com  */
/*                                           www.roygardiner.com      */
/*                                                                    */
/*                                                                    */
/* You may (and are very welcome to):                                 */
/*                                                                    */
/* - use and modify this program as you please                        */
/* - send me bug reports and improvement suggestions to the above     */
/*   email address. All dealt with on an as-and-when basis            */
/* - redisribute this program and its components unchanged            */
/*                                                                    */
/* You are not allowed to:                                            */
/*                                                                    */
/* - resell this program or any part of it                            */
/* - incorporate this program or any part of it in a product which    */
/*   is to be sold.                                                   */
/* - redisribute this program if it or any of its components have     */
/*   been changed                                                     */
/**********************************************************************/
                             /* Editable variables -- start           */
  genHLQ           = "hlq1"
  genLev2Q         = "hlq2"
                             /* Optional user survey dataset          */
  surveyDsn        = genHLQ"."genLev2Q".SURVEY"
                             /* Optional user FAQ dataset             */
  FaqDsn           = genHLQ"."genLev2Q".FAQ"
                             /* Editable variables -- end             */
  arg argstr
                             /* Debug on?                             */

  if pos("DEBUG",argstr) \= 0
  then trace all
  else
  do
     a = msg("OFF")
     a = prompt("OFF")
  end

  address "ISPEXEC"
                             /*****************************************/
                             /* Section:1  General setting up         */
                             /*****************************************/
                             /* general variables                     */
  oper.b = "BROWSE"
  oper.e = "EDIT"
  oper.v = "VIEW"

  library = "ISPPROF"
  today = date()
  ListNames = "NAMES(LMEM LSTATS LDDNAME LDSN LADDED LASHOW LATYPE)"
                             /* panel, message and table libraries    */
  yplib            = genHLQ"."genLev2Q".DDFLIB"
  ymlib            = genHLQ"."genLev2Q".DDFLIB"
  yslib            = genHLQ"."genLev2Q".DDFLIB"
  dsmtlib          = genHLQ"."genLev2Q".DDFLIB"
                             /* SuperC variables                      */
  SuperCforCompare = "LINECMP,DELTAL,NOPRTCC"
  SuperCforMerge   = "LINECMP,DELTAL,UPDLDEL,NOPRTCC"
                             /* action compare; set to M for merge    */
  SuperCAction     = ""
                             /* target dataset for SuperC merge       */
  mrgdsn           = ""
  mrgmem           = ""
                             /* ISPF error message defaults           */
  zerrsm           = ""
  zerrlm           = ""
                             /* Table Extension variables             */
  tsave            = ""
                             /* current version search table          */
  vTable        = ""
                             /* Sort defaults for main table          */
  sort_fields      = "YSHOW,CH,A,YLINE,N,A"
  syspref          = sysvar("SYSPREF")
  sysuid           = sysvar("SYSUID")
                             /* Initial table set up                  */
  "TBSTATS UTTDSM5 STATUS1(STATUS1) STATUS2(STATUS2) LIBRARY("library")"
                             /* Attempted recursive entry?            */
  if status2 = 5 then
  do
                             /* Yes, abandon ship                     */
     "SETMSG MSG(UTMDD041)"
     signal VeryQQuit
  end
                             /* panel, message and table libraries    */
  "LIBDEF ISPPLIB DATASET ID('"yplib"')"
  "LIBDEF ISPMLIB DATASET ID('"ymlib"')"
  "LIBDEF ISPSLIB DATASET ID('"yslib"')"
  "LIBDEF PARMLIB DATASET ID('"dsmtlib"')"
                             /* error handling                        */
  "CONTROL ERRORS RETURN"
  Zerrlm = ""
  rc = 0
  AcceptCCMax = 14
  AcceptCC = AcceptCCMax
  call on error name Error
  call on failure name Error
                             /* User survey being done?               */
  if sysdsn("'"surveydsn"'") = "OK" then
  do
                             /* yes, user already answered?           */
     if sysdsn("'"surveydsn"("sysuid")'") \= "OK" then
     do
                             /* no, copy in survey template           */
        "LMINIT   DATAID(SOURCE) DATASET('"surveydsn"')"
        "LMINIT   DATAID(TARGET) DATASET('"surveydsn"')"
        "LMOPEN   DATAID("source")"
        "LMCOPY   FROMID("source") FROMMEM(ZTEMPLAT)" ,
                  "TODATAID("target") TOMEM("sysuid") REPLACE"
        "LMCLOSE  DATAID("source")"
        "LMFREE   DATAID("source")"
        "LMFREE   DATAID("target")"
     end
                             /* count the number of times this user   */
                             /* has used DDF; use STATS to do it      */
                             /* on the Modified Records area          */
     "LMINIT   DATAID(SOURCE) DATASET('"surveydsn"')"
     "LMOPEN   DATAID("source")"
     "LMMFIND  DATAID("source") MEMBER("sysuid") STATS(YES)"
     if zlvers \= 99  then
     do
        zlvers = 99
        zlmnorc = 0
     end
                             /* Stick at the maximum!                 */
     zlmnorc = min(zlmnorc + 1,65535)
                             /* poll opinions after ever more         */
                             /* invocations of the product            */
     if zlmnorc = 10    | ,
        zlmnorc = 50    | ,
        zlmnorc = 100   | ,
        zlmnorc = 500
     then
     do
                             /* survey explanation panel              */
        if zlmnorc = 10
        then "DISPLAY PANEL(UTPDSM5X)"
        else "SETMSG MSG(UTMDD091)"
                             /* edit survey template. If user fails   */
                             /* to reply, stats will be unchanged     */
        "EDIT     DATASET('"surveydsn"("sysuid")')"
     end
                             /* set stats (or reset after edit)       */
     "LMMSTATS DATAID("source") MEMBER("sysuid")" ,
             "VERSION("zlvers") MODRECS("zlmnorc")"
     "LMCLOSE  DATAID("source")"
     "LMFREE   DATAID("source")"
  end
                           /* Set up 'unique' high level qualifier    */
                           /* clearly marked as temporary             */
  if syspref Â¬= sysuid
  then tmphlq = syspref"."sysuid
  else tmphlq = syspref
  xmvhlq = tmphlq".TEMP.T"time("S")

  "VPUT (XMVHLQ) SHARED"
                             /* User profile parameters               */
  parms = "YTLIB YSCROLL STSHOW YEDIT"
  ytlib   = ""
  yscroll = ""
  stshow  = ""
  "VGET ("parms") PROFILE"
  "VGET (ZUSER ZSCREEN) SHARED"
  pshow   = stshow
                             /* Are lines where the SHOW field is     */
                             /* blank always to be shown?             */
  if yshblank = ""
  then yshblank = "YES"
                             /* Is Edit recovery required?            */
  recover = "YES"
  do while recover = "YES"
                             /*         don't abort if EDREC fails    */
     AcceptCC = 20
     "EDREC QUERY"
     if rc = 4 then
     do
                             /* Yes, recover datasets before doing    */
                             /*      anything else                    */
        "SETMSG MSG(UTMDD011)"
        "EDREC PROCESS"
     end
     else recover = "NO"
     AcceptCC = AcceptCCMax
  end
                             /* see earlier TBSTATS command for       */
                             /* status1 setting                       */
  if status1 > 1 then
  do
     "TBCREATE UTTDSM5 NAMES(YMEM"  ,/* Member for display            */
                            "YOMEM" ,/* Old member (for after find)   */
                            "YTEXT" ,/* DSname/Action list            */
                            "YDESC" ,/* Description of DSlist         */
                            "YDISPL",/* YES/NO for display            */
                            "YTYPE" ,/* Type (for find)               */
                            "YSHOW" ,/* Show text                     */
                            "YLINE" ,/* Line number for sort          */
                   ") REPLACE LIBRARY("library")"
     ymem    = ""
     yomem   = ""
     ytext   = ""
     ydesc   = ""
     ytype   = ""
     yshow   = ""
     ytstats = ""
     ydispl = "YES"
     "TBADD UTTDSM5"
  end
  else "TBOPEN  UTTDSM5  LIBRARY("library") SHARE"
                             /* DDF command summary table, for HELP   */
  "TBOPEN  UTTHELP  LIBRARY("parmlib") SHARE NOWRITE"
                             /* Open or create user's template table  */
  "TBSTATS UTTEMPL STATUS1(STATUS1) LIBRARY("library")"
  if status1 > 1 then
  do
     "TBCREATE UTTEMPL NAMES(YDSNT YTYPET) LIBRARY("library")"
     "TBADD    UTTEMPL"
  end
  else "TBOPEN  UTTEMPL  LIBRARY("library") SHARE"
                             /* the template table contains DSNs and  */
                             /* Types. For each type specified, the   */
                             /* DSN is concatenated to any dataset on */
                             /* the list of the same type when that   */
                             /* dataset is browsed or edited          */
  call TemplBuild

  "TBTOP   UTTDSM5"
  "TBQUERY UTTDSM5 NAMES(NAMES)"
  parse var names "(" names ")"
                             /* set up for move/copy where YSHOW is   */
                             /* not move/copied but inherited from    */
                             /* the target line's value               */
  i = wordpos("YSHOW",names)
  names_less_yshow = delword(names,i,1)
                             /* main display panel                    */
  csrrow = 0
  panel  = "PANEL(UTPDSM5)"
  "SETMSG MSG(UTMDD099)"
                             /* Section:2  Main table display loop    */
                             /*****************************************/
                             /* Continue after severe errors          */
  AcceptCC = AcceptCCMax
                             /* YDISPL controls which table rows are  */
                             /* shown on the display panel            */
  "TBVCLEAR UTTDSM5"
  ydispl = "YES"
  "TBSARG   UTTDSM5 NAMECOND(YDISPL,EQ)"
  do while finished \= "YES"

     "CONTROL ERRORS RETURN"
     "TBDISPL  UTTDSM5" panel "CSRROW("csrrow") AUTOSEL(NO)"
     tbrc = rc
     panel = ""
                             /* END command or PF3? and no Find       */
                             /* function in progress?                 */
     if tbrc = 8 & find \= "YES" then
     do
                             /* Yes, get ready to exit                */
        zcmd = ""
        finished = "YES"
     end
                             /* END command from find, or forced end  */
                             /* of find command?                      */
     if (tbrc = 8 & find = "YES") | endfind = "YES" then
     do
        endfind = ""
                             /* restore all the member names that     */
                             /* were on the display before the FIND   */
        tsave = ""
        find = ""
        "TBTOP  UTTDSM5"
        "TBVCLEAR UTTDSM5"
        yomem = ""
        "TBSARG UTTDSM5 NAMECOND(YOMEM,NE)"
        "TBSCAN UTTDSM5"
        do while rc = 0
           ymem = yomem
           yomem = ""
           "TBPUT UTTDSM5" tsave
           "TBSCAN UTTDSM5"
        end
        panel = "PANEL(UTPDSM5)"
                             /* reset normal display parameters       */
        "TBTOP     UTTDSM5"
        "TBVCLEAR UTTDSM5"
        ydispl = "YES"
        "TBSARG UTTDSM5 NAMECOND(YDISPL,EQ)"
     end
                             /* process all prefix area commands      */
     do while ztdsels > 0
        "TBQUERY UTTDSM5 POSITION(CSRROW)"
                             /* Save row values entered on screen     */
        "VPUT ("names") SHARED"
                             /* Get values from table                 */
        "TBGET   UTTDSM5"
                             /* Store table SHOW value                */
        oldshow = yshow
                             /* Get back values entered on screen     */
                             /* and put them onto the table           */
        "VGET ("names") SHARED"
                             /* Save Show value entered by user       */
        newshow = yshow
        "TBPUT UTTDSM5" tsave
        "TBSKIP UTTDSM5"
                             /* If the SHOW value is changed, any     */
                             /* following hidden lines with the       */
                             /* same Show value must also have        */
                             /* their values changed                  */
        do while    ydispl = "NO"       ,
                 &  yshow = oldshow     ,
                 &  rc = 0
           yshow = newshow
           "TBPUT  UTTDSM5" tsave
           "TBSKIP UTTDSM5"
        end
                             /* Restore table position                */
        "TBTOP  UTTDSM5"
        "TBSKIP UTTDSM5 NUMBER("csrrow")"
        parse var ymem ymem " " .
                             /* Section:3  Prefix (or line) commands  */
                             /*****************************************/
                             /*   SS:3 Linecmd:E Linecmd:B            */
        select
           when linecmd = "E" | linecmd = "B" | linecmd = "V" then
           do
                             /*   SS:3 Linecmd:E                      */
              if linecmd = "E"
              then oper = "EDIT"
              else if linecmd = "V"
              then oper = "VIEW"
              else oper = "BROWSE"
                             /* Does the dataset exist?               */
              listrc = listdsi("'"ytext"'")
              reason = sysreason
              if listrc = 0 then
              do
                             /* Yes, is it sequential?                */
                 if sysdsorg = "PS" then
                 do
                             /* Yes, edit/browse directly             */
                    "CONTROL DISPLAY SAVE"
                    oper "DATASET('"ytext"')"
                    "CONTROL DISPLAY RESTORE"
                 end
                 else
                 do
                             /* No, not sequential, assume a PDS      */
                    xxdsn  = "'"ytext"("ymem")'"
                             /* Force member list?                    */
                    if ymem = "" | pos("*",ymem) \= 0
                    then call mlist
                    else
                    if  sysdsn(xxdsn) = OK | oper = "EDIT" then
                    do
                             /* Pick up template dataset, ensuring no */
                             /* conflict with the other ISPF session  */
                       lookdd = "LOOK"zscreen
                       address "TSO" "ALLOC DD("lookdd")"            ,
                                     "DA('"ytext"'" templ.ytype")"  ,
                                     "SHR REUSE"
                       "LMINIT DATAID(LOOKAT) DDNAME("lookdd")"

                             /* get stats for member                  */
                       call GetISPFStats lookat ymem "OPEN"

                             /* browse/edit member with stats message */
                       "CONTROL DISPLAY SAVE"
                       "SETMSG MSG("sMessage") COND"
                       oper "DATAID("lookat") MEMBER("ymem")"
                       if rc > 8 then
                       "SETMSG MSG(UTMDD010)"
                       sMessage = ""
                       "CONTROL DISPLAY RESTORE"

                       "LMFREE DATAID("lookat")"
                       address "TSO" "FREE DD("lookdd")"
                    end
                             /* If no member match exists, use the    */
                             /* name as a pattern for member list     */
                    else call mlist
                 end
              end
                             /* Display LISTDSI error message         */
              else "SETMSG MSG(UTMDD014)"
           end
                             /* Member list forced                    */
                             /*   SS:3 Linecmd:ML member list         */
           when linecmd = "ML" then
           do
              oper = "BROWSE"
              call mlist
           end
                             /* ISPF 3.1                              */
                             /*   SS:3 Linecmd:31 linecmd:3.1         */
           when linecmd = 31 then
           do
                             /* Save DSN and invoke ISPF              */
              dsn = "'"ytext"'"
              "VPUT (DSN) SHARED"
              "CONTROL DISPLAY SAVE"
              "SELECT  PGM(ISRUDA) PARM(UTPDSM5D)"
              "CONTROL DISPLAY RESTORE"
           end
                             /* ISPF 3.2                              */
                             /*   SS:3 Linecmd:32 linecmd:3.2         */
           when linecmd = 32 then
           do
                             /* Save DSN and invoke ISPF              */
              dsn = "'"ytext"'"
              "VPUT (DSN) SHARED"
              "CONTROL DISPLAY SAVE"
              "SELECT  PGM(ISRUDA) PARM(ISRUDA2)"
              "CONTROL DISPLAY RESTORE"
           end
                             /* ISPF 3.3 (process FROM dataset)       */
                             /*   SS:3 Linecmd:33 linecmd:3.3         */
           when linecmd = 33 then
           do
              copy33 = "YES"
                             /* Member specified?                     */
              if ymem = ""
              then  xdsn1 = "'"ytext"'"
              else
              do
                             /* Yes, append patterning character if   */
                             /*      one not already there            */
                 if right(ymem,1) = "*"
                 then ast = ""
                 else ast = "*"

                 xdsn1 = "'"ytext"("strip(left(ymem""ast,8))")'"
              end

              "VPUT XDSN1 SHARED"
           end
                             /* ISPF 3.3 process TO dataset           */
                             /*   SS:3 Linecmd:TO linecmd:OV          */
           when linecmd = "TO" | linecmd = "OV" then
           do
              tfound = "YES"
                             /* with or without replace?              */
                             /*   SS:3 Linecmd:OV                     */
              if linecmd = "OV"
              then replace = "REPLACE"
              else replace = ""
                             /* save target DSN and member            */
              "TBGET UTTDSM5 ROWID(CTO)"
              tods = ytext
              parse var ymem ymem " " .
              tomember = ymem

              dsn2 = "'"ytext"'"
              "VPUT (DSN2) SHARED"
           end
                             /* ISPF 3.14 string search with SuperC   */
                             /*   SS:3 Linecmd:314 Linecmd:3.14       */
           when linecmd = "314" then
           do
              zssfndsn = "'"ytext"(*)'"
              "VPUT (ZSSFNDSN) SHARED"
              "CONTROL DISPLAY SAVE"
              "SELECT  PGM(ISRSFM)"
              "CONTROL DISPLAY RESTORE"
              zssfndsn = ""
              "VPUT (ZSSFNDSN) SHARED"
           end
                             /* Single member copy/move (from DSN)    */
                             /*   SS:3 Linecmd:CO  Linecmd:MO         */
           when linecmd = "CO" | linecmd = "MO" then
           do
                             /* Member name is compulsory             */
              if ymem = ""
              then "SETMSG MSG(UTMDD015)"
              else
              do
                 cfound = "YES"
                             /* Move or copy?                         */
                             /*   SS:3 Linecmd:CO                     */
                 if linecmd = "CO"
                 then oneact = "LMCOPY"
                 else oneact = "LMMOVE"
                             /* Aquire and save From DSN              */
                 "TBGET UTTDSM5 ROWID(CFROM)"
                 frds     = ytext
                 parse var ymem ymem " " .
                 frmember = ymem
              end
           end
                             /* ISPF 3.4                              */
                             /*   SS:3 Linecmd:34  Linecmd:3.4        */
           when linecmd = 34 then
           do
                             /* User can type 3.4 n in the prefix     */
                             /* area, where n is the number of levels */
                             /* needed. Split the DSN into words, get */
                             /* the first n, put the dots back to     */
                             /* make a DSN qualifier again            */
              dstext = ytext
                             /* Did the user specify 3.4 n?           */
              if datatype(lopt,"NUM")
                             /* yes, so                               */
                             /* 1) 'translate' converts to words      */
                             /* 2) 'delword' gets rid of unwanted     */
                             /*    words (i.e n+1th and onwards)      */
                             /* 3) 'space' replaces all spaces with   */
                             /*    dots to make a DSN qualifier again */
              then dstext =                                          ,
                space(delword(translate(dstext,' ','.'),lopt+1),1,'.')
                             /* Did the user specify 3.4 * ?          */
                             /* yes, make the DSname a pattern        */
              if lopt = "*" & right(dstext,1) \= "*"
              then dstext = dstext"*"                                ,

              "CONTROL DISPLAY SAVE"
              "LMDINIT LISTID(LISTID) LEVEL("dstext")"
              "LMDDISP LISTID("Listid") CONFIRM(YES) VIEW(VOLUME)"
              "LMDFREE LISTID("Listid")"
              "CONTROL DISPLAY RESTORE"
           end
                             /*   SS:3 Linecmd:3.6 or :36             */
                             /*  print dataset or member              */
           when linecmd = "36" then
           do
              if ymem \= ""
              then zhdsn = "'"ytext"("ymem")'"
              else zhdsn = "'"ytext"'"
              "VPUT ZHDSN"

              "CONTROL DISPLAY SAVE"
              "SELECT  PANEL(ISRUTIL) OPT(6)"
              "CONTROL DISPLAY RESTORE"
           end
                             /* Delete member                         */
                             /*   SS:3 Linecmd:DEL                    */
           when linecmd = "DEL" then
           do
                             /* Member name is required               */
              if ymem = ""
              then "SETMSG MSG(UTMDS014)"
              else
              do
                 "LMINIT DATAID(DELT) DATASET('"ytext"') ENQ(SHRW)"
                 if rc = 0 then
                 do
                    "LMOPEN DATAID("delt")  OPTION(OUTPUT)"
                    "LMMDEL DATAID("delt") MEMBER("ymem")"
                    if rc = 0 then
                    do
                             /* erase member name from list           */
                       delmem = ymem
                       "TBPUT UTTDSM5" tsave
                       "SETMSG MSG(UTMDD022)"
                    end
                    else "SETMSG MSG(UTMDD021)"

                    "LMCLOSE DATAID("delt")"
                 end
                 else "SETMSG MSG(UTMDD021)"

                 "LMFREE  DATAID("delt")"
              end
           end
                             /* submit job                            */
                             /*   SS:3 Linecmd:SUB                    */
           when linecmd = "SUB" then
           do
              if ymem = ""
              then dsn = "'"ytext"'"
              else dsn = "'"ytext"("ymem")'"
                             /* get output for job submission message */
              call submit dsn
           end
                             /* show ISPF member stats                */
                             /*   SS:3 Linecmd:STATS                  */
           when linecmd = "STATS" then
           do
              if ymem \= "" then
              do
                 zllib   = ""
                 zlvers  = ""
                 zlmod   = ""
                 zlcdate = ""
                 zlmdate = ""
                 zlmtime = ""
                 zlcnorc = ""
                 zlinorc = ""
                 zlmnorc = ""
                 zluser  = ""
                 "LMINIT  DATAID(SOURCE) DATASET('"ytext"')"
                 "LMOPEN  DATAID("source")"
                 if rc = 0 then
                 do
                    "LMMFIND DATAID("source") MEMBER("ymem") STATS(YES)"
                    if rc = 0 then
                    do
                       xtype  = "OUTPUT"
                       xcolor = "WHITE"
                             /* show ISPF member stats                */
                       "CONTROL DISPLAY SAVE"
                       do while rc = 0
                          "DISPLAY PANEL(UTPDSM5C)"
                       end
                       "CONTROL DISPLAY RESTORE"
                             /* optional update if requested          */
                       if xtype = "INPUT"
                       then ,
                          "LMMSTATS"         ,
                          "DATAID("source")"    ,
                          "MEMBER("ymem")"      ,
                          "VERSION("zlvers")"   ,
                          "MODLEVEL("zlmod")"   ,
                          "CREATED("zlcdate")"  ,
                          "MODDATE("zlmdate")"  ,
                          "MODTIME("zlmtime")"  ,
                          "CURSIZE("zlcnorc")"  ,
                          "INITSIZE("zlinorc")" ,
                          "MODRECS("zlmnorc")"  ,
                          "USER("zluser")"
                    end
                    else "SETMSG MSG(UTMDD010)"
                 end
                 else "SETMSG MSG(UTMDD010)"
                 "LMCLOSE DATAID("source")"
                 "LMFREE  DATAID("source")"
              end
           end
                             /* SuperC compare or merge (new dataset) */
                             /*   SS:3 Linecmd:CPN                    */
           when linecmd = "CPN" then
           do
              cpnew = linecmd
              newdsn = ytext
              newmem = ymem
           end
                             /* SuperC compare or merge (old dataset) */
                             /*   SS:3 Linecmd:CPO                    */
           when linecmd = "CPO" then
           do
              cpold  = linecmd
              olddsn = ytext
              oldmem = ymem
           end
                             /* SuperC extended  (new dataset)        */
                             /*   SS:3 Linecmd:NEW                    */
           when linecmd = "NEW" then
           do
              xtnnew  = linecmd
              newdsn = ytext
              newmem = ymem
           end
                             /* SuperC extended  (old dataset)        */
                             /*   SS:3 Linecmd:OLD                    */
           when linecmd = "OLD"  then
           do
              xtnold  = linecmd
              olddsn = ytext
              oldmem = ymem
           end
                             /* SuperC extended (optional merge dsn)  */
                             /*   SS:3 Linecmd:MRG                    */
           when linecmd = "MRG"  then
           do
              xtnmrg  = linecmd
              mrgdsn = ytext
              mrgmem = ymem
           end
                             /* Insert or repeat lines                */
                             /*   SS:3 Linecmd:I   Linecmd:R          */
           when linecmd = "I"  | linecmd = "R" then
           do
                             /* Insert clear lines                    */
                             /*   SS:3 Linecmd:I                      */
              if linecmd = "I"
              then "TBVCLEAR UTTDSM5"
              ydispl = "YES"

              "TBADD    UTTDSM5"
              "TBQUERY  UTTDSM5 POSITION(CSRROW)"
                             /* Insert/Repeat multiple lines          */
              if datatype(number,"NUM") then
              do i = 1 to number-1
                 "TBADD  UTTDSM5"
              end

              SortR = "YES"
              "VPUT SORTR SHARED"
           end
                             /* Hide lines with same show type        */
                             /*   SS:3 Linecmd:HI                     */
           when linecmd = "HI" then
           do
              yshow_store = yshow

              if yshow = "" then yshblank = ""
                             /* Continue until new show type found    */
              "TBSKIP UTTDSM5"
              do while yshow_store = yshow & rc = 0
                 ydispl = "NO"
                 "TBPUT   UTTDSM5" tsave
                 "TBSKIP  UTTDSM5"
              end
           end
                             /* Show lines with same show type        */
                             /*   SS:3 Linecmd:SH                     */
           when linecmd = "SH" then
           do
              yshow_store = yshow

              if yshow = "" then yshblank = "YES"
                             /* Continue until new show type found    */
              "TBSKIP UTTDSM5"
              do while yshow_store = yshow & rc = 0
                 ydispl = "YES"
                 "TBPUT   UTTDSM5" tsave
                 "TBSKIP  UTTDSM5"
              end
           end
                             /* Delete line                           */
                             /*   SS:3 Linecmd:D                      */
           when linecmd = "D" then
           do
              "TBDELETE UTTDSM5"
           end
                             /* Prepare to move line                  */
                             /*   SS:3 Linecmd:M                      */
           when linecmd = "M" then
           do
              copy = ""
              move = "YES"
              "TBGET  UTTDSM5 ROWID(FROM) NOREAD"
           end
                             /* Prepare to copy line                  */
                             /*   SS:3 Linecmd:C                      */
           when linecmd = "C" then
           do
              move = ""
              copy = "YES"
              "TBGET  UTTDSM5 ROWID(FROM) NOREAD"
           end
                             /* .. after this line                    */
                             /*   SS:3 Linecmd:A                      */
           when linecmd = "A" then
           do
              before = ""
              after  = "YES"
              "TBGET  UTTDSM5 ROWID(TO) NOREAD"
           end
                             /* .. before this line                   */
                             /*   SS:3 Linecmd:A  Linecmd:B4          */
           when linecmd = "BE" | linecmd = "B4" then
           do
              after  = ""
              before = "YES"
              "TBGET  UTTDSM5 ROWID(TO) NOREAD"
           end
                             /* exclude line from display             */
                             /*   SS:3 Linecmd:X                      */
           when linecmd = "X" then
           do
              ydispl = "NO"
              "TBPUT UTTDSM5" tsave
           end
                             /*   SS:3 Linecmd:ACT                    */
           when linecmd = "ACT" then
           do
              "CONTROL DISPLAY SAVE"
              "DISPLAY PANEL(UTPDSM5A) COMMAND(YTEXT)"
              "CONTROL DISPLAY RESTORE"
           end
                             /*   SS:3 Linecmd:EX                     */
           when linecmd = "EX" then
           do
              "CONTROL DISPLAY SAVE"
              address "TSO" "EX '"ytext"("ymem")'"
              "CONTROL DISPLAY RESTORE"
           end
                             /*   SS:3 Linecmd:TM                     */
           when linecmd = "TM" then
           do
              "CONTROL DISPLAY SAVE"
              "DISPLAY PANEL(UTPDSM5N)"
              do while rc = 0

                 a = msg("ON")
                 if ymem \= ""
                 then address "TSO" ,
                     "TRANSMIT" ynode"."yuser "DA('"ytext"("ymem")')"
                 else address "TSO" ,
                     "TRANSMIT" ynode"."yuser "DA('"ytext"')"
                 a = msg("OFF")
                 "DISPLAY PANEL(UTPDSM5N)"
              end
              "CONTROL DISPLAY RESTORE"
           end

           otherwise nop
        end
                             /* Have all rows been processed?         */
        if ztdsels > 1
        then "TBDISPL  UTTDSM5"
        else ztdsels = 0
     end
                             /* If command entered on command line,   */
                             /* make sure cursor stays there          */
     if zcmd \= ""
     then  csrrow = 0
                             /* Section:4  Command-line commands      */
                             /*****************************************/
                             /* find command options ignoring any     */
                             /* interpolated blanks                   */
     parse var szcmd command opt1 opt2 opt3 opt4 .
     next_zcmd = ""
     select
                             /* Show first line in each show group    */
                             /*   SS:4 Zcmd:SHOW                      */
        when zcmd = "SHOW" then
        do
                             /* establish search argument             */
           stShow = pshow opt1
           pshow = stShow
           "VPUT STSHOW PROFILE"
                             /* hide all displayed rows               */
           "TBVCLEAR UTTDSM5"
           ydispl = "YES"
           "TBSARG  UTTDSM5 NAMECOND(YDISPL,EQ)"

           "TBTOP    UTTDSM5"
           "TBSCAN   UTTDSM5"
           do while rc = 0
              ydispl = "NO"
              "TBPUT  UTTDSM5" tsave
              "TBSCAN UTTDSM5"
           end
                             /* for each word in the show list:       */
           showFound = "NO"
           do i = 1 to words(pshow)
              "TBTOP    UTTDSM5"
              "TBVCLEAR UTTDSM5"
              ydispl = "NO"
                             /* use each word as a prefix             */
              yshow  = subword(pshow,i,1)"*"
                             /* search for equal rows to display that */
                             /* are not already being displayed       */
              "TBSARG UTTDSM5 NAMECOND(YDISPL,EQ,YSHOW,EQ)"
              "TBSCAN UTTDSM5"
              do while rc = 0
                 ydispl = "YES"
                 showFound = "YES"
                 "TBPUT UTTDSM5" tsave
                 "TBSCAN UTTDSM5"
              end
           end
                             /* If nothing found, add 1st line        */
           if showFound \= "YES" & pshow \= "" then
           do
              "TBVCLEAR UTTDSM5"
              ydispl = "YES"
              yshow = subword(pshow,1,1)
              "TBADD UTTDSM5"
           end
                             /* re-establish display arguments        */
           "TBVCLEAR UTTDSM5"
           ydispl = "YES"

           "TBSARG UTTDSM5 NAMECOND(YDISPL,EQ)"
           "TBTOP  UTTDSM5"
                             /* Force redisplay                       */
           panel  = "PANEL(UTPDSM5)"
        end
                             /*   SS:4 Zcmd:HEADS                     */
        when zcmd = "HEADS" then
        do
           "TBTOP UTTDSM5"
           "TBSKIP UTTDSM5"
           yshow_store = yshow
           ydispl = "YES"
           "TBPUT UTTDSM5" tsave

          "TBSKIP UTTDSM5"
           do while rc = 0
                             /* Check each show field against the next*/
              if yshow_store \= yshow then
              do
                 yshow_store = yshow
                 ydispl = "YES"
              end
                             /* Are blanks always shown?              */
              else if yshow = "" & yshblank = "YES"
                   then ydispl = "YES"
                   else ydispl = "NO"

              "TBPUT UTTDSM5" tsave
              "TBSKIP UTTDSM5"
           end
                             /* force panel redisplay                 */
           panel  = "PANEL(UTPDSM5)"
        end
                             /*   SS:4 Zcmd:SORT                      */
        when zcmd = "SORT" then
        do
           select
               when opt1 = "" then this_sort = sort_fields
               when abbrev("MEMBER",opt1,1) then
                          this_sort = "YMEM,C,A"
               when abbrev("TEXT",opt1,1) then
                          this_sort = "YTEXT,C,A"
               when abbrev("DESCRIPTION",opt1,1) then
                          this_sort = "YDESC,C,A"
               when abbrev("SHOW",opt1,1) then
                          this_sort = "YSHOW,C,A"
               when abbrev("TYPE",opt1,1) then
                          this_sort = "YTYPE,C,A"
               otherwise  this_sort = sort_fields
           end
           call sort_table this_sort
           "TBTOP  UTTDSM5"
                             /* force redisplay of table              */
           panel  = "PANEL(UTPDSM5)"
        end
                             /*   SS:4 Zcmd:RESET                     */
        when zcmd = "RESET" then
        do
                             /* display every line of table           */
           "TBTOP  UTTDSM5"
           "TBSKIP UTTDSM5"
           do while rc = 0
              ydispl = "YES"
              "TBPUT   UTTDSM5" tsave
              "TBSKIP  UTTDSM5"
           end
           "TBTOP  UTTDSM5"
                             /* force redisplay of table              */
           panel  = "PANEL(UTPDSM5)"
        end
                             /*   SS:4 Zcmd:CANCEL                    */
        when zcmd = "CANCEL" then signal qquit
                             /* List datasets allocated               */
                             /*   SS:4 Zcmd:LISTALLOC Zcmd:LA         */
        when zcmd = "LISTALLOC" then
        do
                             /* Get table of allocated datasets       */
           call AllocatedDsns
                             /* display and process table             */
           call DisplayTable "LISTA","UTPDSM5H"
        end
                             /* Add new lines...                      */
                             /*   SS:4 Zcmd:ADD                       */
        when zcmd = "ADD" then
        do
                             /* order all existing lines first        */
           call Sort_Table sort_fields
                             /* ...from a list of allocated files     */
           ladded = ""
           lashow = ""
           latype = ""

           if opt1 = "ALLOC"
           then call addalloc
           else
           if opt1 \= ""
                             /* ...from a DS prefix list              */
           then call addpref
        end
                             /* find a member in the list             */
                             /*   SS:4 Zcmd:F Zcmd:FIND               */
        when zcmd = "FIND" then
        do
                             /* MEMBER and TYPE parameters reqd.      */
           if opt1 = "" then
           do
              next_zcmd = zcmd "?  ?"
              "SETMSG MSG(UTMDD026)"
           end
           else
           if opt2 = "" then
           do
                             /*  TYPE parameter reqd.                 */
              next_zcmd = zcmd opt1 "*"
              "SETMSG MSG(UTMDD027)"
           end
           else
           do
                             /* member stats will be shown            */
              tsave = "SAVE(TSTATS)"
              find = "YES"
              "TBTOP     UTTDSM5"
              "TBVCLEAR  UTTDSM5"
                             /* scan either for ALL or by TYPE        */
              if opt2 = "*" then
              do
                 cond1 = "YTYPE,GE"
                 ytype = ""
              end
              else
              do
                 cond1 = "YTYPE,EQ"
                 ytype = opt2
              end
              select
                 when opt3 = "NX" then
                 do
                    cond2 = ",YDISPL,EQ"
                    ydispl = "YES"
                 end
                 when opt3 = "X" then
                 do
                    cond2 = ",YDISPL,NE"
                    ydispl = "YES"
                 end
                 otherwise
                 do
                    cond2 = ""
                    ydispl = ""
                 end
              end

              "TBSARG  UTTDSM5 NAMECOND("cond1""cond2")"
              "TBSCAN  UTTDSM5"
              do while rc = 0

                 yomem = ymem
                 ymem    = ""
                 zlvers        = ""
                 zlmod         = ""
                 zlmdate       = ""
                 zlmtime       = ""
                 zluser        = ""
                             /* Get member and stats                  */
                 "LMINIT  DATAID(FDSET) DATASET('"ytext"')"
                 "LMOPEN  DATAID("fdset")"
                 tstats = ""
                 "LMMFIND DATAID("fdset") MEMBER("opt1") STATS(YES)"
                 if rc = 0 then
                 do
                             /* Member was found                      */
                    ymem = opt1
                             /* move stats in if any were found       */
                    if  zlvers \= ""
                    then tstats = zlvers"."zlmod zlmdate zlmtime zluser
                 end

                 "LMCLOSE DATAID("fdset")"
                 "LMFREE  DATAID("fdset")"
                 "TBPUT  UTTDSM5" tsave
                             /* get next matching row                 */
                 "TBSCAN UTTDSM5"
              end

              "TBVCLEAR  UTTDSM5"
              type = opt2
                             /* User can decide whether to see all    */
                             /* rows or just where search successful  */
              "SETMSG MSG(UTMDD028)"
              smem = ""
              if yfaf = "F" then
              do
                 smem = "YMEM,EQ)"
                 ymem = opt1
                 "SETMSG MSG(UTMDS028)"
              end

              "TBSARG UTTDSM5 NAMECOND(TYPE,EQ"smem")"
              "TBTOP UTTDSM5"
              panel  = "PANEL(UTPDSM5E)"
           end
        end
                             /*   SS:4 Zcmd:TEMPL                     */
        when zcmd = "TEMPL" then
        do
                             /* Show table of template datasets       */
           call DisplayTable "UTTEMPL","UTPDSM5I"
           call TemplBuild
        end
                             /*   SS:4 Zcmd:SAVE                      */
        when zcmd = "SAVE" then
        do
                             /* Save table without quitting           */
           "TBSAVE UTTDSM5 PAD(10)"
           "SETMSG MSG(UTMDD037)"
        end
                             /*   SS:4 Zcmd:CMDL                      */
        when zcmd = "CMDL" then
        do
           "CONTROL DISPLAY SAVE"
           call help_display
           "CONTROL DISPLAY RESTORE"
        end
                             /* Display version search libraries      */
                             /*   SS:4 Zcmd:VSL <list number>         */
        when zcmd = "VSL" then
        do
                             /* If no number specified, assume 1      */
           if opt1 = ""
           then opt1 = 1
                             /* create table if necessary             */
           vTable = "UTTV"opt1
           "TBSTATS" vTable "STATUS1(STATUS1)" ,
                            "STATUS2(STATUS2) LIBRARY("library")"
           if status2 = 1 then
           do
              if status1 = 2 then
              do
                 "TBCREATE" vTable "NAMES(VTDSN"      ,
                                         "VTLETTER"   ,
                               ") REPLACE"
                 "TBADD" vTable
              end
              else "TBOPEN" vTable "LIBRARY("library") SHARE"
           end
                             /* default is not to submit job...       */
           vlsub = "NO"
                             /* display table                         */
           call DisplayTable vTable,"UTPDSM5L","FIELDS(VTLETTER,C,A)"
                             /* ...only submit at user request        */
           if vlsub = "YES" then
           do
              vlsub = "NO"
              call BatchTSO "UTSTSO01"
           end
           else "SETMSG MSG(UTMDD052)"
                             /* close after usage                     */
           "TBCLOSE" vTable "LIBRARY("library")"
        end
                             /*   SS:4 Zcmd:FAQ                       */
        when zcmd = "FAQ" then
        do
                             /* Check availability of FAQ dataset     */
           a = sysdsn("'"FaqDsn"'")
           if a = "OK" then
           do
                             /* Browse or Edit requested?             */
              if opt1 = "E"
              then oper = "EDIT"
              else if opt1 = "V"
              then oper = "VIEW"
              else oper = "BROWSE"

              "CONTROL DISPLAY SAVE"
              acceptCC = AcceptCCMax
              oper "DATASET('"FaqDsn"')"
              if rc > 8 then
              "SETMSG MSG(UTMDD010)"
              acceptCC = AcceptCCMax
              "CONTROL DISPLAY RESTORE"
           end
           else
           do
              zerrlm = a
              "SETMSG MSG(UTMDD010)"
           end
        end
        otherwise nop
     end
     zcmd = next_zcmd
                             /* Section:5  Command pairs (e.g.CO/TO)  */
                             /*****************************************/
                             /*   SS:5  :copy :move                   */
     if (move   = "YES" | copy   = "YES") & ,
        (after  = "YES" | before = "YES") then
     do
        "TBSKIP UTTDSM5   ROW("from")"
                             /* delete 'FROM' line when moving        */
        if move = "YES"
        then "TBDELETE UTTDSM5"
                             /* save 'FROM' values                    */
        "VPUT ("names_less_yshow") SHARED"
                             /* point at new position                 */
        "TBSKIP  UTTDSM5 ROW("to")"
                             /* step back 1 if 'before'               */
        if before = "YES"
        then "TBSKIP  UTTDSM5 NUMBER(-1)"
                             /* retrieve values and add               */
        "VGET ("names_less_yshow") SHARED"
        "TBADD    UTTDSM5"
                             /* get new line row number               */
        "TBQUERY  UTTDSM5 POSITION(CSRROW)"
        SortR = "YES"
        "VPUT SORTR SHARED"
                             /* reset all indicators                  */
        after  = ""
        before = ""
        move   = ""
        copy   = ""
     end
                             /*   SS:5  :CPN :CPO                     */
     if cpnew = "CPN" & cpold = "CPO" then
     do
                             /* SuperC compare without merge          */
        cpnew = ""
        cpold = ""
                             /* check dataset/member combinations     */
        call checkDsns
                             /* Check datasets                        */
        Status1 = sysdsn(fqolddsn)
        if Status1 \= "OK"
        then "SETMSG MSG(UTMDD031)"
        else
        do
           Status2 = sysdsn(fqnewdsn)
           if Status2 \= "OK"
           then "SETMSG MSG(UTMDD032)"
        end
                             /* Only do compares if datasets OK       */
        if Status1 = "OK" & Status2 = "OK" then
        do
           SuperCParm = SuperCforCompare
                             /* No statements dataset needed          */
           address "TSO" "FREE  DD(SYSIN)"
           call SuperC
        end
     end
                             /*   SS:5  :NEW :OLD :MRG                */
     if xtnnew = "NEW" & xtnold = "OLD" then
     do
                             /* Extended SuperC                       */
        xtnnew    = ""
        xtnold    = ""
        xtnmrg    = ""

        "CONTROL DISPLAY SAVE"
        "DISPLAY PANEL(UTPDSM5K)"
        do while rc < 8
                             /* check dataset/member combinations     */
           call checkDsns
                             /* check datasets exist as specified     */
           Status1 = sysdsn(fqolddsn)
           if Status1 \= "OK"
           then "SETMSG MSG(UTMDD031)"
           else
           do
              Status2 = sysdsn(fqnewdsn)
              if Status2 \= "OK"
              then "SETMSG MSG(UTMDD032)"
                             /* Is it a merge?                        */
              else if ycpopt = 2 then
              do
                             /* Yes, merge dataset must exist but     */
                             /* member must NOT exist, must be new    */
                 Status3 = sysdsn("'"mrgdsn"'")
                 if Status3 \= "OK"
                 then "SETMSG MSG(UTMDD034)"
                 Status4 = sysdsn(fqmrgdsn)
                 if Status4 = "OK"
                 then "SETMSG MSG(UTMDD035)"
              end
           end

           select
                             /* Option 1, compare without merge       */
              when  ycpopt = 1 &                              ,
                  (Status1 = "OK" & Status2  = "OK")  then
              do
                 SuperCParm = SuperCforCompare
                 call SuperCStatements
                 call SuperC
              end
                             /* Option 2, merge                       */
              when ycpopt = 2 &                          ,
                  (Status1 = "OK" & Status2  = "OK"      ,
                  & Status3 = "OK" & Status4 \= "OK") then
              do
                 SuperCParm = SuperCforMerge
                 SuperCAction = "M"
                 address "TSO" "ALLOC DD(DELDD)"  ,
                               "DA("fqmrgdsn") SHR REUSE"
                 call SuperCStatements
                 call SuperC
                 address "TSO" "FREE  DD(DELDD)"
              end
                             /* Option 3, Logical level compare       */
              when ycpopt = 3 & ,
                  (Status1 = "OK" & Status2  = "OK")  then
              do
                 SuperCParm = SuperCforCompare
                 call SuperCStatements "LOGICAL"
                 call SuperC
              end
              otherwise nop
           end
           "DISPLAY PANEL(UTPDSM5K)"
        end
        zcmd = ""
        "CONTROL DISPLAY RESTORE"
     end
                             /* Single member copy                    */
     if cfound = "YES" & tfound = "YES" then
     do
        cfound = ""
        tfound = ""
                             /* 'TO' member name specified?           */
                             /* No, then same as 'FROM'               */
        if tomember = "" then tomember = frmember

        "LMINIT DATAID(TO)   DATASET('"tods"')"
        "LMINIT DATAID(FROM) DATASET('"frds"')"
        "LMOPEN DATAID("from")"
                             /* Text for result message               */
        if oneact = "LMMOVE"
        then act = "Move"
        else act = "Copy"
                             /* 20 allows for member in use           */
        acceptcc = 20
        oneact   "FROMID("from") TODATAID("to")" ,
                 "FROMMEM("frmember") TOMEM("tomember")" replace
        actrc = rc
        acceptcc = AcceptCCMax

        "LMFREE DATAID("to")"
        "LMFREE DATAID("from")"
                             /* Put member name in target row         */
        "TBSKIP UTTDSM5  ROW("cto")"
        if actrc = 0 then
        do
           ymem = tomember
           "TBPUT UTTDSM5" tsave
           "SETMSG MSG(UTMDD016)"
        end
        else "SETMSG MSG(UTMDD017)"

        "TBQUERY UTTDSM5 POSITION(CSRROW)"
     end
                             /*  ISPF 3.3 copy                        */
     if copy33 = "YES" & tfound = "YES" then
     do
        copy33 = ""
        tfound = ""
                             /* 3.3 replace option specified?         */
        if replace = "REPLACE"
        then zurep = "Y"
        else zurep = "N"
        "VPUT (ZUREP)"
                             /* Invoke 3.3                            */
        "CONTROL DISPLAY SAVE"
        "SELECT  PGM(ISRUMC)"
        "CONTROL DISPLAY RESTORE"
     end
                             /* make sure any error message is only   */
                             /* displayed once                        */
     if zerrsm \= "" then
     do
        "SETMSG MSG(UTMDD010) COND"
        zerrsm = ""
     end
  end
                             /* Section:6  End of processing          */
                             /*****************************************/
                             /* save parameters and main table        */
finish:
  "VPUT ("parms") PROFILE"
  call sort_table(sort_fields)
  "TBCLOSE UTTDSM5  LIBRARY("library")"
  "TBCLOSE UTTEMPL  LIBRARY("library")"
                             /* quick exit                            */
qquit:
                             /* abandon tables if not already closed  */
  AcceptCC = AcceptCCMax
  "CONTROL ERRORS RETURN"
  "TBEND   UTTDSM5"
  "TBEND   UTTHELP"
  "TBEND   UTTEMPL"
                             /* turn off libraries                    */
  "LIBDEF ISPPLIB"
  "LIBDEF ISPMLIB"
  "LIBDEF PARMLIB"
                             /* abandon ship!                         */
VeryQQuit:
  exit
                             /* Section:7  S/R: member list           */
                             /*****************************************/
mlist:
                             /* ML means full member list requested   */
  if linecmd = "ML" | ymem = ""
  then mbr = ""
                             /* If pattern already specified, OK,     */
                             /* otherwise insert an * on the right    */
  else if pos("%",ymem) = 0 && ,
          pos("*",ymem) = 0
       then mbr = "MEMBER("strip(ymem)")"
       else mbr = "MEMBER("strip(substr(strip(ymem)"*",1,8))")"

                             /* Intitialise member list data set      */
                             /* with template if specified            */
  address "TSO" "ALLOC DD(DSM3TMP"zscreen")" ,
                      "DA('"ytext"'" templ.ytype") SHR REUSE"
  "LMINIT DATAID(DSET) DDNAME(DSM3TMP"zscreen") ENQ(SHR)"
  "LMOPEN  DATAID("dset")"
                             /* Display member list                   */
  "CONTROL DISPLAY SAVE"
  "LMMDISP DATAID("dset") OPTION(DISPLAY) COMMANDS(ANY) FIELD(9)" mbr
  disprc = rc
  if disprc > 0
  then   "SETMSG MSG(UTMDD010)"
  else
  do while disprc = 0
                             /* Split command line options            */
     parse var zcmd command opt1 opt2 opt3 .
     zcmd = ""

     if abbrev("EDIT",command,1)   then command = "EDIT"
     if abbrev("BROWSE",command,1) then command = "BROWSE"
     if abbrev("VIEW",command,1) then command = "VIEW"

     if (command = "EDIT" | command = "BROWSE" | command = "VIEW") ,
        & opt1 \= "" then
     do
                             /* Edit/browse commmand line selection   */
        call GetISPFStats dset opt1 "NOOPEN"
        "CONTROL DISPLAY SAVE"
        "SETMSG MSG("sMessage") COND"
        command "DATAID("dset") MEMBER("opt1")"
        if rc > 8 then
        "SETMSG MSG(UTMDD010)"
        "CONTROL DISPLAY RESTORE"
                             /* Add to displayed list                 */
        "LMMDISP DATAID("dset") OPTION(ADD) MEMBER("opt1")"
     end
     else
     if command Â¬= "" then
     do
        zerrsm = "Invalid command"
        zerrlm = "Valid commands are: Edit View Browse"
       "SETMSG MSG(ISRZ002)"
     end

     getrc  = 0
     do while getrc = 0
                             /* Process selected members              */
        smember = zlmember
        zllcmd  = strip(translate(zllcmd,' ','_'))
                             /* validate line command                 */
        if zllcmd Â¬= "/" & ,
           zllcmd Â¬= "R" & ,
           zllcmd Â¬= "S" & ,
           zllcmd Â¬= "B" & ,
           zllcmd Â¬= "V" & ,
           zllcmd Â¬= "E" & ,
           zllcmd Â¬= "EXEC" & ,
           zllcmd Â¬= "" & ,
           Â¬abbrev("EXEC",zllcmd,2) & ,
           Â¬abbrev("DELETE",zllcmd,3) & ,
           Â¬abbrev("SUB",zllcmd,3)
        then
        do
           zerrsm = "Invalid line command"
           zerrlm = ">"zllcmd"< is not a valid command"
          "SETMSG MSG(ISRZ002)"
        end
                             /* member selected by just 'enter'       */
        if zllcmd = "/" then
        select
           when oper = "EDIT"   then zllcmd = "E"
           when oper = "VIEW"   then zllcmd = "V"
           otherwise                 zllcmd = "B"
        end
                             /*   SS:7 Zllcmd:R                       */
        if zllcmd = "R" then
        if zludata = "" | (substr(zludata,1,1) < "A" &       ,
                           (substr(zludata,1,1) Â¬= "#" &     ,
                            substr(zludata,1,1) Â¬= "$" &     ,
                            substr(zludata,1,1) Â¬= "@"))     ,
                        | substr(zludata,1,1) > "Z" then

        do
           zerrsm = "Invalid new name"
           zerrlm = ">"zludata"< is not a valid new name"
          "SETMSG MSG(ISRZ002)"
        end
        else
        do
                             /* Rename                                */
           "LMINIT  DATAID(DSETREN) DATASET('"ytext"') ENQ(SHRW)"
           "LMOPEN  DATAID("dsetren") OPTION(OUTPUT)"
           "LMMREN  DATAID("dsetren")" ,
                           "MEMBER("zlmember") NEWNAME("zludata")"
           "LMCLOSE DATAID("dsetren")"
           "LMFREE  DATAID("dsetren")"
           "LMMDISP DATAID("dset") OPTION (ADD)"  ,
                           "MEMBER("zludata") ZLUDATA("zlmember")"
                             /* New name already there?               */
                             /*  Yes, modify existing entry           */
           if rc = 8
           then  "LMMDISP DATAID("dset") OPTION (PUT)"  ,
                           "MEMBER("zludata") ZLUDATA("zlmember")"
           "LMMDISP DATAID("dset") OPTION (PUT)"   ,
                           "MEMBER("zlmember") ZLUDATA()"
        end
                             /*   SS:7 Zllcmd:DELETE                  */
        if abbrev("DELETE",zllcmd,3) then
        do
           "LMINIT  DATAID(DSETDEL) DATASET('"ytext"') ENQ(SHRW)"
           "LMOPEN  DATAID("dsetdel") OPTION(OUTPUT)"
           "LMMDEL  DATAID("dsetdel") MEMBER("zlmember")"
           "LMCLOSE DATAID("dsetdel")"
           "LMFREE  DATAID("dsetdel")"
                             /* show deletion on the display          */
           "LMMDISP DATAID("dset") OPTION (PUT)"  ,
                           "MEMBER("zlmember") ZLUDATA(Deleted)"
        end
                             /*   SS:7 Zllcmd:SUBMIT                  */
        if abbrev("SUBMIT",zllcmd,3) then
        do
           subdsn = "'"ytext"("strip(zlmember)")'"
                          /* get output for job submission message */
           a = msg("ON")
           a = outtrap("LINE.","*")
           address "TSO" "PROFILE MSGID"
           address "TSO" "SUBMIT" subdsn
           a = msg("OFF")
           a = outtrap("FRED.",0)
           parse var line.1 . . jobno .
           "SETMSG MSG(UTMDD023)"
        end
                             /*   SS:8 Zllcmd:EX                      */
        if abbrev("EXEC",zllcmd,2) then
        do
           "CONTROL DISPLAY SAVE"
           address "TSO" "EX '"ytext"("strip(zlmember)")'"
           "CONTROL DISPLAY RESTORE"
        end
                             /*   SS:9 Zllcmd:E Zllcmd:B Zllcmd:S     */
                             /* select prefix command                 */
        thisoper = ""
             if zllcmd = "S" then thisoper = oper
        else if zllcmd = "B" then thisoper = "BROWSE"
        else if zllcmd = "V" then thisoper = "VIEW"
        else if zllcmd = "E" then thisoper = "EDIT"

                             /* process prefix command                */
        if thisoper \= "" then
        do
           call GetISPFStats dset zlmember "NOOPEN"
           "CONTROL DISPLAY SAVE"
           "SETMSG MSG("sMessage") COND"
           thisoper "DATAID("dset") MEMBER("zlmember")"
           if rc > 8 then
           "SETMSG MSG(UTMDD010)"
           "CONTROL DISPLAY RESTORE"
        end
                             /* get next selected member              */
        "LMMDISP DATAID("dset") OPTION(GET)"
        getrc = rc
     end
                             /* redisplay member list                 */
     "LMMDISP DATAID("dset") OPTION(DISPLAY) TOP("smember")"
     disprc = rc
  end
  "CONTROL DISPLAY RESTORE"
                             /* end of member list display            */
  "LMMDISP DATAID("dset") OPTION(FREE)"
  "LMCLOSE DATAID("dset")"
  "LMFREE  DATAID("dset")"
  address "TSO" "FREE  DD(DSM3TMP"zscreen")"
  return
                             /* Section:8  S/R: template list         */
                             /*****************************************/
TemplBuild:
  "TBTOP   UTTEMPL"
  "TBSKIP  UTTEMPL"
  templ. = ""
  do while rc = 0

     if ydsnt \= ""
     then templ.ytypet = "'"ydsnt"'"

     "TBSKIP  UTTEMPL"
  end
  return
                             /* Section:9  S/R: allocated data sets   */
                             /*****************************************/
addalloc:
  /* Add to display from list of allocated datasets                   */
                             /* Get table of allocated datasets       */
  call AllocatedDsns
                             /* display and process table             */
  call DisplayTable "LISTA","UTPDSM5F"
                             /* sort added items                      */
  call sort_table sort_fields
  "TBTOP   UTTDSM5"
  panel  = "PANEL(UTPDSM5)"
  return
                             /* Section:10 S/R: dataset prefix list   */
                             /*****************************************/
addpref:
  /* Add from specified data set prefix                               */
                             /* Create temporary table                */
  "TBCREATE LISTB NOWRITE REPLACE" ListNames
                             /* Create prefix list                    */
  ldsn = ""
  "LMDINIT LISTID(LISTIDV) LEVEL("opt1")"
  "LMDLIST LISTID("listidv") OPTION(LIST) DATASET(LDSN) STATS(NO)"
  do while rc = 0
     "TBADD LISTB"
     "LMDLIST LISTID("listidv") OPTION(LIST)",
              "DATASET(LDSN) STATS(NO)"
  end
  "LMDLIST LISTID("listidv") OPTION(FREE)"
  address "ISPEXEC" "LMDFREE LISTID("listidv")"
                             /* display and process table             */
  call DisplayTable "LISTB","UTPDSM5G"
                             /* sort new entries to standard order    */
  "TBSORT  UTTDSM5  FIELDS("sort_fields")"
  "TBTOP UTTDSM5"
  panel  = "PANEL(UTPDSM5)"
  return
                             /* Section:11 S/R: list allocated DSNs   */
                             /*****************************************/
AllocatedDsns:
  /* Create table of all allocated datasets                           */
                             /* Trap TSO LISTA output                 */
  a = outtrap("LINE.","*")
  address "TSO" "LISTA ST"
  a = outtrap("FRED.",0)
  yshow = ""
  ytype = ""
                             /* Build list of allocated datasets      */
  "TBCREATE LISTA NOWRITE REPLACE" ListNames
  do i = 2 to line.0
                             /* Find DDname and DSNs                  */
     if substr(line.i,1,2) \= "  " then
     do
                             /* It's a DSN line                       */
        parse var line.i part1 part2 .
        if part1 \= "TERMFILE" then
        do
           ldsn = part1
           j = i + 1
                             /* Find DDname, if any, on the next line */
           parse var line.j part1 part2 ','
           if part2 = ""
           then lddname = ""
           else lddname = part1
           "TBADD LISTA"
        end
     end
  end
  AllocTableBuilt = "YES"
  return
                             /* Section:12 S/R: Display table         */
                             /*****************************************/
DisplayTable:
  /* Display temporary table and process additions                    */
  "CONTROL DISPLAY SAVE"
  arg table,t_panel,t_sortarg
  ascroll   = yscroll
  old_lashow = ""
  old_latype = ""
  lashow     = ""
  latype     = ""
  lmem       = ""
  crp        = 0
  tblrow     = 0
  "TBTOP"   table
  "TBDISPL" table "PANEL("t_panel") CSRROW("tblrow")"
  subTbRc = rc
  do while subTbRc < 8 | ztdsels > 0
                             /* parse command line ignoring           */
                             /* interpolated blanks                   */
     parse var bzcmd command alopt1 alopt2 alopt3 alopt4 .
                             /*   SS:12 azcmd:LOCATE                  */
                             /* Locate specified DDname               */
     if azcmd = "LOCATE" then
     do
        azcmd = ""
        "TBTOP"    table
        "TBVCLEAR" table
        lddname  = alopt1
        "TBSCAN" table "ARGLIST(LDDNAME) CONDLIST(EQ) POSITION(CRP)"
     end
     else
                             /*   SS:12 azcmd:FIND                    */
     if azcmd = "FIND" then
     do
                             /* MEMBER and TYPE parameters reqd.      */
        if alopt1 = "" then
        do
           zcmd = zcmd "?  ?"
           "SETMSG MSG(UTMDD036)"
        end
        else
        do
           "TBTOP"    table
           "TBVCLEAR" table
           lddname = alopt2
                             /* scan either for ALL or by TYPE        */
           "TBSARG"   table "NAMECOND(LDDNAME,EQ)"
           "TBSCAN"   table "POSITION(CRP)"
           if rc = 0 then
           do until lddname \= ""

              zlvers        = ""
              zlmod         = ""
              zlmdate       = ""
              zlmtime       = ""
              zluser        = ""
                             /* get member and stats                  */
              "LMINIT  DATAID(FDSET) DATASET('"ldsn"')"
              "LMOPEN  DATAID("fdset")"
              "LMMFIND DATAID("fdset") MEMBER("alopt1") STATS(YES)"
              if rc = 0 then
              do
                             /* move stats in if any were found       */
                 if  zlvers \= "" then
                   lstats = zlvers"."zlmod zlmdate zlmtime zluser
                 else lstats = "Found with no ISPF stats"
                 lmem = alopt1
              end
              else
              do
                 lmem = ""
                 lstats = ""
              end

              "LMCLOSE DATAID("fdset")"
              "LMFREE  DATAID("fdset")"
              "TBPUT" table
                             /* get next matching row                 */
              "TBSKIP" table
           end
                             /* Suppress display of final MEMBER NOT  */
                             /* FOUND message as it is misleading     */
           zerrsm = ""
        end
     end
     else crp = ztdtop

                             /* Process all selected lines            */
     do while ztdsels > 0
                             /* Update table                          */
        "TBPUT" table
                             /*   SS:12 alcmd:S                       */
                             /* Select lines for table                */
        if alcmd = "S" then
        do
                             /* Select (LIST tables only)             */
           SortR = "YES"
           "VPUT SORTR SHARED"
           ytext = ldsn
                             /* Inherit attributes from previous      */
                             /* selection if not entered              */
           if lashow  = "" then lashow = old_lashow
           if latype  = "" then latype = old_latype
                             /* store for inheritance                 */
           old_lashow = lashow
           old_latype = latype
           ladded = "Added"
                             /* Always show new line                  */
           ydispl = "YES"
                             /* Update table                          */
           "TBPUT" table
                             /* Initialise line for main table        */
           yshow = lashow
           ytype = latype
           ymem  = ""
           yomem = ""
                             /*  Show that selection made             */
           "TBADD UTTDSM5"
        end
        else
                             /*   SS:12 alcmd:B alcmd:E               */
        if alcmd = "B" | alcmd = "E" | alcmd = "V" then
        do
                             /* Browse (TEMPLATE and LIST tables)     */
           if table \= "UTTEMPL" then
           do
              opdsn = ldsn
              opmem = lmem
           end
           else
           do
                             /* (Full member list always given for    */
                             /* UTTEMPL - it won't be used much)      */
              opdsn = ydsnt
              opmem = ""
           end

           if opmem \= ""
           then fullc = oper.alcmd "DATASET('"opdsn"("strip(opmem)")')"
           else fullc = oper.alcmd "DATASET('"opdsn"')"

           "CONTROL DISPLAY SAVE"
                             /* just in case it's rubbish....         */
           AcceptCC = 20
           fullc
           AcceptCC = AcceptCCMax
           "CONTROL DISPLAY RESTORE"
        end
        else
                             /*   SS:12 alcmd:E  alcmd:R              */
        if alcmd = "I"  | alcmd = "R" then
        do
                             /* Insert lines                          */
           if alcmd = "I"
           then "TBVCLEAR" table

           "TBADD" table
           "TBQUERY" table "POSITION(TBLROW)"
        end
        else
                             /*   SS:12 alcmd:D                       */
        if alcmd = "D" then
        do
                             /* Delete lines                          */
           "TBDELETE" table
        end

        alcmd = ""
                             /*  get next selected line               */
        if ztdsels = 1
        then  ztdsels = 0
        else "TBDISPL" table
     end
                             /* make sure any error message is only   */
                             /* displayed once                        */
     if zerrsm \= "" then
     do
        "SETMSG MSG(UTMDD010) COND"
        zerrsm = ""
     end
                             /* sort table if requested               */
     if t_sortarg \= ""
     then "TBSORT" table t_sortarg

                             /* reposition table                      */
     azcmd = ""
     if subTbRc \= 8 then
     do
        "TBTOP  " table
        "TBSKIP " table "NUMBER("crp")"
        "TBDISPL" table "PANEL("t_panel") CSRROW("tblrow")"
        SubTbRc = rc
     end
  end
  "CONTROL DISPLAY RESTORE"
  return
                             /* Section:13 S/R: Invoke SuperC         */
                             /*****************************************/
SuperC:
  outdsn =  "'"xmvhlq".SUPERC"zscreen"'"

  address "TSO" "FREE  DD(SYSIN2)"
                             /* Dataset/members to be compared        */
  address "TSO" "ALLOC DD(OLDDD) DA("fqolddsn") SHR REUSE"
  address "TSO" "ALLOC DD(NEWDD) DA("fqnewdsn") SHR REUSE"
  address "TSO" "ALLOC DD(OUTDD) DA("outdsn")" ,
                "NEW SPACE(1,5) CYLINDERS REUSE"
                             /* Compare then browse output            */
  "SELECT PGM(ISRSUPC) PARM("SuperCParm")"
                              /* Is it a merge action?                */
  if SuperCAction = "M" then
  do
                              /* Yes, issue message saying merge done */
     "SETMSG MSG(UTMDD038)"
     SuperCAction = ""
  end
  else
  do
                              /* No, browse comparison output         */
     "CONTROL DISPLAY SAVE"
     "BROWSE DATASET("outdsn")"
     if rc \= 0 then "SETMSG MSG(UTMDD010)"
     "CONTROL DISPLAY RESTORE"
  end
                              /* Free datasets                        */
  address "TSO" "FREE  DD(SYSIN)"
  address "TSO" "FREE  DD(OLDDD,NEWDD,OUTDD)"
  address "TSO" "DELETE" outdsn
  return
                             /* Section:14 S/R: Sort main table       */
                             /*****************************************/
sort_table:
  /* Sort display into specified order                                */
  arg sort_arg
                             /* Renumber only needed if display lines */
                             /* have been moved during the session    */
  "VGET SORTR SHARED"
  if SortR = "YES" then
  do
     SortR = ""
     "VPUT SORTR SHARED"
                             /* TBSORT will randomise the order of    */
                             /* rows with equal sort keys; assigning  */
                             /* each row a unique number and using it */
                             /* in the sort stops this.               */
     SortR = ""
     xx = 1
     "TBTOP  UTTDSM5"
     "TBSKIP UTTDSM5"
     do while rc = 0
        yline = xx
        xx = xx + 1
        "TBPUT UTTDSM5" tsave
        "TBSKIP UTTDSM5"
     end
  end
  "TBSORT UTTDSM5 FIELDS("sort_arg")"
  return
                             /* Section:15 S/R: Display help table    */
                             /*****************************************/
 help_display:
                             /* Display command summary table         */
  "TBDISPL UTTHELP PANEL(UTPHCMD)"
  do while rc < 8
                             /* Allow multiple S prefix commands      */
     do while ztdsels > 0

        if lhcmd = "S" then
        do
                             /* Display on a panel full details of    */
                             /* the selected command                  */
           "CONTROL DISPLAY SAVE"
           "DISPLAY PANEL(UTPHCMD1)"
           do while rc < 8
              "DISPLAY PANEL(UTPHCMD1)"
           end
           "CONTROL DISPLAY RESTORE"
        end
                             /* Get next selected line                */
        if ztdsels > 1
        then "TBDISPL  UTTHELP"
        else ztdsels = 0
     end
     lhcmd = ""
     "TBDISPL UTTHELP PANEL(UTPHCMD)"
  end
  return
                             /* Section:16 S/R: Create SuperC stmts   */
                             /*****************************************/
 SuperCStatements:
  arg LogicalOption
                             /* Create SuperC input statements file   */
                             /* from the specified from:to columns    */
  outline.1  = "*"
  if ycpcoll \= 0 then
  do
                             /* Non-zero leftmost column, so create   */
                             /* a statements file                     */
     outline.1  = "CMPCOLM" ycpcoll":"ycpcolr
     lines = 1
     SysinRqd = "YES"
  end
  if LogicalOption = "LOGICAL" then
  do
                             /* Make sure case does not affect the    */
                             /* scan for change control keywords      */
     outline.2   = "NCHGT 'c','C'"
     outline.3   = "NCHGT 'Ch','CH'"
     outline.4   = "NCHGT 'CHa','CHA'"
     outline.5   = "NCHGT 'CHAn','CHAN'"
     outline.6   = "NCHGT 'CHANg','CHANG'"
     outline.7   = "NCHGT 'CHANGe','CHANGE'"
     outline.8   = "NCHGT 'CHANGEc','CHANGEC'"
     outline.9   = "NCHGT 'CHANGECo','CHANGECO'"
     outline.10  = "NCHGT 'CHANGECOn','CHANGECON'"
     outline.11  = "NCHGT 'CHANGECONt','CHANGECONT'"
     outline.12  = "NCHGT 'CHANGECONTr','CHANGECONTR'"
     outline.13  = "NCHGT 'CHANGECONTRo','CHANGECONTRO'"
     outline.14  = "NCHGT 'CHANGECONTROl','CHANGECONTROL'"
     outline.15  = "NCHGT 'CHANGECONTROL-s','CHANGECONTROL-S'"
     outline.16  = "NCHGT 'CHANGECONTROL-St','CHANGECONTROL-ST'"
     outline.17  = "NCHGT 'CHANGECONTROL-STa','CHANGECONTROL-STA'"
     outline.18  = "NCHGT 'CHANGECONTROL-STAr','CHANGECONTROL-STAR'"
     outline.19  = "NCHGT 'CHANGECONTROL-STARt','CHANGECONTROL-START'"
     outline.20  = "NCHGT 'CHANGECONTROL-e','CHANGECONTROL-E'"
     outline.21  = "NCHGT 'CHANGECONTROL-En','CHANGECONTROL-EN'"
     outline.22  = "NCHGT 'CHANGECONTROL-ENd','CHANGECONTROL-END'"
     outline.23  = "OCHGT 'c','C'"
     outline.24  = "OCHGT 'Ch','CH'"
     outline.25  = "OCHGT 'CHa','CHA'"
     outline.26  = "OCHGT 'CHAn','CHAN'"
     outline.27  = "OCHGT 'CHANg','CHANG'"
     outline.28  = "OCHGT 'CHANGe','CHANGE'"
     outline.29  = "OCHGT 'CHANGEc','CHANGEC'"
     outline.30  = "OCHGT 'CHANGECo','CHANGECO'"
     outline.31  = "OCHGT 'CHANGECOn','CHANGECON'"
     outline.32  = "OCHGT 'CHANGECONt','CHANGECONT'"
     outline.33  = "OCHGT 'CHANGECONTr','CHANGECONTR'"
     outline.34  = "OCHGT 'CHANGECONTRo','CHANGECONTRO'"
     outline.35  = "OCHGT 'CHANGECONTROl','CHANGECONTROL'"
     outline.36  = "OCHGT 'CHANGECONTROL-s','CHANGECONTROL-S'"
     outline.37  = "OCHGT 'CHANGECONTROL-St','CHANGECONTROL-ST'"
     outline.38  = "OCHGT 'CHANGECONTROL-STa','CHANGECONTROL-STA'"
     outline.39  = "OCHGT 'CHANGECONTROL-STAr','CHANGECONTROL-STAR'"
     outline.40  = "OCHGT 'CHANGECONTROL-STARt','CHANGECONTROL-START'"
     outline.41  = "OCHGT 'CHANGECONTROL-e','CHANGECONTROL-E'"
     outline.42  = "OCHGT 'CHANGECONTROL-En','CHANGECONTROL-EN'"
     outline.43  = "OCHGT 'CHANGECONTROL-ENd','CHANGECONTROL-END'"
     outline.44  = "CMPLINE TOP 'CHANGECONTROL-START'"
     outline.45  = "CMPLINE BTM 'CHANGECONTROL-END'"
     lines = 45
  end
  if SysinRqd = "YES" then
  do
     address "TSO" "ALLOC DD(SYSIN) SP(1) TRACKS REUSE"         ,
                   "DSORG(PS) RECFM(F B) LRECL(80) BLKSIZE(80)"
     address "TSO" "EXECIO" lines "DISKW SYSIN (FINIS STEM OUTLINE."
  end
                             /* leftmost column zero, so no Sysin     */
                             /* and SuperC will do full width compare */
  else
  do
     address "TSO" "FREE DD(SYSIN)"
  end

  return
                             /* Section:16 S/R: SuperC datasets       */
                             /*****************************************/
checkDsns:
                             /* Check member name settings            */
                             /* If only one set, then it is used for  */
                             /* both comparisons. If both are set,    */
                             /* then use both                         */
  select
     when newmem = "" & oldmem = "" then
     do
        fqolddsn = "'"olddsn"'"
        fqnewdsn = "'"newdsn"'"
     end
     when newmem  = "" & oldmem \= "" then
     do
        fqolddsn = "'"olddsn"("oldmem")'"
        fqnewdsn = "'"newdsn"("oldmem")'"
     end
     when newmem \= "" & oldmem = "" then
     do
        fqolddsn = "'"olddsn"("newmem")'"
        fqnewdsn = "'"newdsn"("newmem")'"
     end
     otherwise
     do
        fqolddsn = "'"olddsn"("oldmem")'"
        fqnewdsn = "'"newdsn"("newmem")'"
     end
  end
                             /* check also Merge dataset              */
  if mrgdsn \= "" then
  do
     select
        when mrgmem \= "" then fqmrgdsn = "'"mrgdsn"("mrgmem")'"
        when newmem \= "" then
        do
           fqmrgdsn = "'"mrgdsn"("newmem")'"
           mrgmem   = newmem
        end
        when oldmem \= "" then
        do
           fqmrgdsn = "'"mrgdsn"("oldmem")'"
           mrgmem   = oldmem
        end
        otherwise
     end
  end
  return
getISPFStats:

  arg StatsDataid StatsMem StatsAction
  zllib   = ""
  zlvers  = ""
  zlmod   = ""
  zlcdate = ""
  zlmdate = ""
  zlmtime = ""
  zlcnorc = ""
  zlinorc = ""
  zlmnorc = ""
  zluser  = ""
  source = StatsDataid
                             /* Open dataid only if requested         */
  rc = 0
  if StatsAction = "OPEN"
  then "LMOPEN  DATAID("source")"
  if rc = 0 then
  do
                             /* Find member if open successful        */
     "LMMFIND DATAID("source") MEMBER("StatsMem") STATS(YES)"
     if rc = 0 then
     do
                             /* Construct message giving ISPF stats   */
        if zluser \= ""
        then sLegend = "Last edited by" zluser "on" zlmdate ,
                       "at" zlmtime
        else sLegend = "No ISPF stats for this member"
     end
     else sLegend = rc StatsMem zerrlm
                             /* Notify level if current and last user */
                             /* the same, or if no ISPF stats. If     */
                             /* user now is not the same as the last  */
                             /* user, issue a warning message         */
     if zluser = zuser | zluser = ""
     then sType = "NOTIFY"
     else sType = "WARNING"
     sMessage   = "UTMDD045"
  end
  else "SETMSG MSG(UTMDD010)"
                             /* close dataid, if requested            */
  if StatsAction = "OPEN"
  then "LMCLOSE DATAID("source")"

  return
batchTSO:
                             /* Build TSO batch job                   */

  "CONTROL DISPLAY SAVE"
  "DISPLAY PANEL(UTPDSM5M)"
  dsrc = rc
  "CONTROL DISPLAY RESTORE"
  if dsrc = 0 then
  do
     arg skeleton
     "FTOPEN TEMP"
     "FTINCL UTSJOB"
     "FTINCL UTSTSO"
     "FTINCL" skeleton
     "FTCLOSE"
     "VGET ZTEMPF SHARED"
     "VGET YEDIT  PROFILE"
                             /* Edit or submit the JCL                */
     if yedit = "YES" then
     do
        "CONTROL DISPLAY SAVE"
        "EDIT DATASET('"ztempf"')"
        "CONTROL DISPLAY RESTORE"
     end
     else call submit "'"ztempf"'"
  end
  return

submit:
                             /* trap output messages from submission  */
  arg dsn
  a = msg("ON")
  a = outtrap("LINE.","*")
  address "TSO" "PROFILE MSGID"
  address "TSO" "SUBMIT" dsn
  a = msg("OFF")
  a = outtrap("FRED.",0)
  parse var line.1 . . jobno .
  "SETMSG MSG(UTMDD023)"
  return
 /********************************************************************/
                             /* Generalised error handling            */
Error:
                             /* Return acceptable code to the program */
  if (rc >= 0 & rc <= AcceptCC) then
  do
     return
  end
                             /* Or report the error and terminate     */
  eline = sourceline(sigl)
  errCond = condition("C")
  errDesc = condition("D")
                             /* get error text if applicable          */
  if lrc > 0 & lrc < 100
  then etext = errortext(lrc)
  else etext = ""
                             /* Check error code                      */
  if lrc = -3
  then etext = "A Host command was not found"
  "DISPLAY PANEL(UTPDSM5Z)"
  signal qquit
                             /* :END end of processing                */
/**********************************************************************/
/*                                                                    */
/* Maintenance Notes - Use of Edit                                    */
/* -------------------------------                                    */
/*                                                                    */
/* 1) find major sections     F SECTION: ALL                          */
/* 2) subsections             F SS: ALL                               */
/*                                                                    */
/* Notes                                                              */
/* -----                                                              */
/*  a) each major section has a number (e.g. SECTION:3) and there is  */
/*     never a blank between the colon (:) and the number             */
/*  b) each SS: is followed by the number of the section of which it  */
/*     is a part (e.g. SS:3) folowed by further commentary.           */
/*                                                                    */
/*  To find the code relating to a line (prefix area) or command line */
/*  command in one of the various displays, use the Edit finds as     */
/*  below where xxx is the command (xxx can be more or less than      */
/*  three characters).                                                */
/*                                                                    */
/* 1) main display line commands                     F LINECMD:xxx    */
/* 2) main display main commands                     F ZCMD:xxx       */
/* 3) LA and ADD prefix sub-display line commands    F ALCMD:xxx      */
/* 4)   ditto                       main commands    F ALCMD:xxx      */
/* 5) member list line commands                      F ZLLCMD:xxx     */
/*                                                                    */
/**********************************************************************/
