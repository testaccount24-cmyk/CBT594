Introduction

  The idea of DDF is to speed up many of the normal jobs in ISPF
  by eliminating the need to remember and then type dataset names
  all the time.

  DDF keeps a list of datasets, which you enter under the Text
  heading above. Names can be in any order. Actions are entered
  under the Cmd heading and include commands to

     * edit a dataset (or member)
     * browse a dataset (or member)
     * display and edit member stats
     * compare members
     * copy a member from one dataset to another (optionally
       changing name)
     * compare and merge members
     * find versions of members across many datasets
     * submit jobs
     * access ISPF functions including 3.1, 3.2, 3.3, 3.4, 3.14
       (search for strings)
     * produce member list and then within member list:

          o submit batch job
          o browse member
          o edit member
          o rename member
          o delete member
          o execute member.

  What is DDF?

  DDF is a Rexx exec and some ISPF panels, skeletons and
  messages. There is no Assembler and no need to complile
  anything. There are no tricks or dodges; all DDF functions are
  standard ISPF which you can see (and modify if you need to) in
  the code.

       You do not need to be a systems programmer to install DDF;
  anyone with modest knowledge of ISPF can set it up for personal
  use, or for use by more than one person. DDF does not interfere
  with your ISPF environment beyond requiring one exec to be
  copied to a suitable command library. All other DDF libraries
  remain separate from and therefore independent of your standard
  session, and indeed are only available whilst DDF is running -
  DDF uses LIBDEF to gain access to them.

  Who uses DDF?

  When DDF is made widely available, experience shows that that
  up to 10% of a typical TSO/ISPF user population will use it
  every day; some of these will use DDF as their standard front
  screen, rather than having an ISPF main menu. The main users
  seem generally to be to be development people rather than
  systems programmers; the latter have often written any number
  of shortcuts and tools for themselves and have their working
  environments tailored perfectly to suit them.
